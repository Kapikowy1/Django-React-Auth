{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL } from './myTypes';\nexport const login = (username, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/login`, body, config);\n    if (res.data.success) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data.username\n      });\n    } else {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const register = (username, password, re_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password,\n    re_password\n  });\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/register`, body, config);\n    if (res.data.error) {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    'withCredentials': true\n  });\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/logout`, body, config);\n    if (res.data.success) {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: LOGOUT_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGOUT_FAIL\n    });\n  }\n};","map":{"version":3,"names":["axios","Cookies","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","login","username","password","dispatch","config","headers","get","body","JSON","stringify","res","post","process","env","REACT_APP_API_URL","data","success","type","payload","err","register","re_password","error","logout"],"sources":["C:/Users/newus/OneDrive/Pulpit/DocoAppDemoFinal/frontend/src/actions/auth.js"],"sourcesContent":["import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAIL,\r\n} from './myTypes';\r\n\r\nexport const login = (username, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ username, password });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/login`, body, config);\r\n\r\n        if (res.data.success) {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data.username\r\n            });\r\n\r\n            \r\n        } else {\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            });\r\n        }\r\n    } catch(err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const register = (username, password, re_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ username, password, re_password });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/register`, body, config);\r\n\r\n        if (res.data.error) {\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS\r\n            });\r\n        }\r\n    } catch (err) {\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const logout = () => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        'withCredentials': true\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/logout`, body, config);\r\n\r\n        if (res.data.success) {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: LOGOUT_FAIL\r\n            });\r\n        }\r\n    } catch(err) {\r\n        dispatch({\r\n            type: LOGOUT_FAIL\r\n        });\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,SACIC,gBAAgB,EAChBC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,cAAc,EACdC,WAAW,QACR,WAAW;AAElB,OAAO,MAAMC,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK,MAAMC,QAAQ,IAAI;EAC3D,MAAMC,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,aAAa,EAAEZ,OAAO,CAACa,GAAG,CAAC,WAAW;IAC1C;EACJ,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAER,QAAQ;IAAEC;EAAS,CAAC,CAAC;EAEnD,IAAI;IACA,MAAMQ,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,iBAAgB,EAAEP,IAAI,EAAEH,MAAM,CAAC;IAE7F,IAAIM,GAAG,CAACK,IAAI,CAACC,OAAO,EAAE;MAClBb,QAAQ,CAAC;QACLc,IAAI,EAAErB,aAAa;QACnBsB,OAAO,EAAER,GAAG,CAACK,IAAI,CAACd;MACtB,CAAC,CAAC;IAGN,CAAC,MAAM;MACHE,QAAQ,CAAC;QACLc,IAAI,EAAEpB;MACV,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAMsB,GAAG,EAAE;IACThB,QAAQ,CAAC;MACLc,IAAI,EAAEpB;IACV,CAAC,CAAC;EACN;AACJ,CAAC;AAGD,OAAO,MAAMuB,QAAQ,GAAGA,CAACnB,QAAQ,EAAEC,QAAQ,EAAEmB,WAAW,KAAK,MAAMlB,QAAQ,IAAI;EAC3E,MAAMC,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,aAAa,EAAEZ,OAAO,CAACa,GAAG,CAAC,WAAW;IAC1C;EACJ,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAER,QAAQ;IAAEC,QAAQ;IAAEmB;EAAY,CAAC,CAAC;EAEhE,IAAI;IACA,MAAMX,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,oBAAmB,EAAEP,IAAI,EAAEH,MAAM,CAAC;IAEhG,IAAIM,GAAG,CAACK,IAAI,CAACO,KAAK,EAAE;MAChBnB,QAAQ,CAAC;QACLc,IAAI,EAAEtB;MACV,CAAC,CAAC;IACN,CAAC,MAAM;MACHQ,QAAQ,CAAC;QACLc,IAAI,EAAEvB;MACV,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAOyB,GAAG,EAAE;IACVhB,QAAQ,CAAC;MACLc,IAAI,EAAEtB;IACV,CAAC,CAAC;EACN;AACJ,CAAC;AAED,OAAO,MAAM4B,MAAM,GAAGA,CAAA,KAAM,MAAMpB,QAAQ,IAAI;EAC1C,MAAMC,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,aAAa,EAAEZ,OAAO,CAACa,GAAG,CAAC,WAAW;IAC1C;EACJ,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IACxB,iBAAiB,EAAE;EACvB,CAAC,CAAC;EAEF,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,kBAAiB,EAAEP,IAAI,EAAEH,MAAM,CAAC;IAE9F,IAAIM,GAAG,CAACK,IAAI,CAACC,OAAO,EAAE;MAClBb,QAAQ,CAAC;QACLc,IAAI,EAAEnB;MACV,CAAC,CAAC;IACN,CAAC,MAAM;MACHK,QAAQ,CAAC;QACLc,IAAI,EAAElB;MACV,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAMoB,GAAG,EAAE;IACThB,QAAQ,CAAC;MACLc,IAAI,EAAElB;IACV,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}